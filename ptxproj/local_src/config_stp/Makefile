#######################################################################################################################
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2023 WAGO GmbH & Co. KG
#
##############################################################################################################################################################################################################################################
# Makefile for PTXdist package libconfig-stp
# This makefile uses the infrastructure provided by ct-build.
.SUFFIXES:  # Delete make's default suffix rules

.PHONY: default
default: all

#######################################################################################################################
# Overridable project configuration

PROJECT_ROOT ?= .

PTXDIST_PACKAGE ?= CONFIG_STP
PTXDIST_PACKAGE_MK_FILE ?= $(PTXDIST_WORKSPACE)/rules/config_stp.make

SRC_DIR = $(PROJECT_ROOT)/src

#######################################################################################################################
# Optional package/ platform feature configuration

-include $(SCRIPT_DIR)/platform_1.mk

#######################################################################################################################
# Custom toolchain configuration

LINT_RULE_FILES = \
	$(LINT_CONFIG_DIR)/lint-rules/pfc.lnt

#######################################################################################################################
# Build target configuration

MAIN_BUILDTARGETS += \
	config_stp.elf \
	libconfig-stp.a

TEST_BUILDTARGETS += \
	alltests.elf

BUILDTARGETS += \
	$(MAIN_BUILDTARGETS) \
	$(TEST_BUILDTARGETS)

INSTALL_TARGETS += \
	$(DESTDIR)/etc/config-tools/config_stp

#######################################################################################################################
# Settings shared between build targets
SHARED_CCXXFLAGS += -fPIC
SHARED_CCXXFLAGS += -fvisibility=hidden
SHARED_CFLAGS    += $(call option_std,gnu99)
SHARED_CXXFLAGS  += $(call option_std,gnu++17)
SHARED_CXXFLAGS  += -fvisibility-inlines-hidden
SHARED_INCLUDES  += -isystem $(SYSROOT)/usr/include
SHARED_INCLUDES  += -isystem $(SYSROOT)/usr/include/glib-2.0 #system header that clang tidy should ignore
SHARED_INCLUDES  += -I$(PROJECT_ROOT)/src/stp-config/

#/# Find the names of those artefacts in a dependency list which are generated by this makefile.
# $(call local_prerequisites,name)
local_prerequisites = $(call lib_buildtarget_raw,$($(1)_LIBS) $($(1)_PKG_CONFIG_LIBS),$($(1)_STATICALLYLINKED))


#######################################################################################################################
# Settings for build target libconfig-stp.a

libconfig-stp.a_LIBS             +=
libconfig-stp.a_STATICALLYLINKED +=
libconfig-stp.a_PKG_CONFIGS      += libconfigstp
libconfig-stp.a_DISABLEDWARNINGS += psabi
libconfig-stp.a_PREREQUISITES    += $(call local_prerequisites,libconfig-stp.a)
libconfig-stp.a_SOURCES          += $(call glob_r,$(addprefix $(SRC_DIR)/stp-config/**/*.,$(SOURCE_FILE_EXTENSIONS)))
libconfig-stp.a_CPPFLAGS         += $(call pkg_config_cppflags,$(libconfig-stp.a_PKG_CONFIGS))
libconfig-stp.a_CPPFLAGS         += $(SHARED_INCLUDES)
libconfig-stp.a_CCXXFLAGS        += $(SHARED_CCXXFLAGS)
libconfig-stp.a_CFLAGS           += $(SHARED_CFLAGS)
libconfig-stp.a_CFLAGS           += $(libconfig-stp.a_CCXXFLAGS)
libconfig-stp.a_CFLAGS           += $(call pkg_config_cflags,$(libconfig-stp.a_PKG_CONFIGS))
libconfig-stp.a_CXXFLAGS         += $(SHARED_CXXFLAGS)
libconfig-stp.a_CXXFLAGS         += $(libconfig-stp.a_CCXXFLAGS)
libconfig-stp.a_CXXFLAGS         += $(call pkg_config_cxxflags,$(libconfig-stp.a_PKG_CONFIGS))
libconfig-stp.a_CLANG_TIDY_CHECKS += $(CLANG_TIDY_CHECKS)
libconfig-stp.a_CLANG_TIDY_CHECKS += -google-runtime-references
libconfig-stp.a_CLANG_TIDY_CHECKS += -clang-diagnostic-c++98-c++11-c++14-compat

#######################################################################################################################
# Settings for build target alltests.elf

alltests.elf_LIBS             += config-stp gmock_main gmock gtest
alltests.elf_STATICALLYLINKED += config-stp gmock_main gmock gtest
alltests.elf_PKG_CONFIGS      += $(libconfig-stp.a_PKG_CONFIGS)
alltests.elf_DISABLEDWARNINGS += psabi
alltests.elf_PREREQUISITES    += $(call local_prerequisites,alltests.elf)
alltests.elf_SOURCES          += $(call glob_r,$(addprefix $(PROJECT_ROOT)/test-src/**/*.,$(SOURCE_FILE_EXTENSIONS)))
alltests.elf_CPPFLAGS         += -I$(SRC_DIR)
alltests.elf_CPPFLAGS         += $(call pkg_config_cppflags,$(alltests.elf_PKG_CONFIGS))
alltests.elf_CPPFLAGS         += $(SHARED_INCLUDES)
alltests.elf_CCXXFLAGS        += $(SHARED_CCXXFLAGS)
alltests.elf_CCXXFLAGS        += $(call option_disable_warning,$(alltests.elf_DISABLEDWARNINGS))
alltests.elf_CFLAGS           += $(SHARED_CFLAGS)
alltests.elf_CFLAGS           += $(alltests.elf_CCXXFLAGS)
alltests.elf_CFLAGS           += $(call pkg_config_cflags,$(alltests.elf_PKG_CONFIGS))
alltests.elf_CXXFLAGS         += $(SHARED_CXXFLAGS)
alltests.elf_CXXFLAGS         += $(alltests.elf_CCXXFLAGS)
alltests.elf_CXXFLAGS         += $(call pkg_config_cxxflags,$(alltests.elf_PKG_CONFIGS))
alltests.elf_LDFLAGS          += $(call option_lib,$(alltests.elf_LIBS),alltests.elf)
alltests.elf_LDFLAGS          += $(call pkg_config_ldflags,$(alltests.elf_PKG_CONFIGS), --static)
alltests.elf_CLANG_TIDY_CHECKS += $(GTEST_CLANG_TIDY_CHECKS)
alltests.elf_CLANG_TIDY_CHECKS += -google-runtime-references
alltests.elf_CLANG_TIDY_CHECKS += -clang-diagnostic-c++98-c++11-c++14-compat

#######################################################################################################################
# Settings for build target config_stp.elf

config_stp.elf_LIBS             += config-stp
config_stp.elf_STATICALLYLINKED += config-stp
config_stp.elf_PKG_CONFIGS      += $(libconfig-stp.a_PKG_CONFIGS) glib-2.0
config_stp.elf_DISABLEDWARNINGS +=
config_stp.elf_PREREQUISITES    += $(call local_prerequisites,config_stp.elf)
config_stp.elf_SOURCES          += $(call glob_r,$(addprefix $(PROJECT_ROOT)/src/*.,$(SOURCE_FILE_EXTENSIONS)))
config_stp.elf_CPPFLAGS         += -I$(SRC_DIR)
config_stp.elf_CPPFLAGS         += $(SHARED_INCLUDES)
config_stp.elf_CPPFLAGS         += $(call pkg_config_cppflags,$(config_stp.elf_PKG_CONFIGS))
config_stp.elf_CCXXFLAGS        += $(SHARED_CCXXFLAGS)
config_stp.elf_CCXXFLAGS        += $(call option_disable_warning,$(config_stp.elf_DISABLEDWARNINGS))
config_stp.elf_CFLAGS           += $(SHARED_CFLAGS)
config_stp.elf_CFLAGS           += $(config_stp.elf_CCXXFLAGS)
config_stp.elf_CFLAGS           += $(call pkg_config_cflags,$(config_stp.elf_PKG_CONFIGS))
config_stp.elf_CXXFLAGS         += $(SHARED_CXXFLAGS)
config_stp.elf_CXXFLAGS         += $(config_stp.elf_CCXXFLAGS)
config_stp.elf_CXXFLAGS         += $(call pkg_config_cxxflags,$(config_stp.elf_PKG_CONFIGS))
config_stp.elf_LDFLAGS          += $(call option_lib,$(config_stp.elf_LIBS),config_stp.elf)
config_stp.elf_LDFLAGS          += $(call pkg_config_ldflags,$(config_stp.elf_PKG_CONFIGS), --static)
config_stp.elf_CLANG_TIDY_CHECKS += $(CLANG_TIDY_CHECKS)
config_stp.elf_CLANG_TIDY_CHECKS += -google-runtime-references
config_stp.elf_CLANG_TIDY_CHECKS += -clang-diagnostic-c++98-c++11-c++14-compat

#######################################################################################################################
# Build infrastructure

include $(SCRIPT_DIR)/buildclang_1.mk
-include $(PTXDIST_WORKSPACE)/../wago_intern/debugging/scripts/valgrind-target.mk


#######################################################################################################################
# Custom rules

HDR_DIR=$(DESTDIR)/usr/include/config_stp

$(DESTDIR)/etc/config-tools/%: $(BIN_DIR)/%.elf | $(DESTDIR)/etc/config-tools
	cp $< $@

$(DESTDIR)/etc/config-tools: $(DESTDIR)
	mkdir -p $(DESTDIR)/etc/config-tools


#######################################################################################################################
# Bootstrapping

#/# This rule complains if the folder pointed to by SCRIPT_DIR does not contain any .mk files.
$(SCRIPT_DIR)/%.mk:
	$(error build scripts unavailable ($@) - set script dir (SCRIPT_DIR=$(SCRIPT_DIR)))
