--- a/wscript	2022-08-31 12:40:13.143205141 +0200
+++ b/wscript	2022-08-31 12:39:54.819245622 +0200
@@ -21,7 +21,6 @@
 samba_dist.DIST_DIRS('''lib/ldb:. lib/replace:lib/replace lib/talloc:lib/talloc
                         lib/tdb:lib/tdb lib/tdb:lib/tdb lib/tevent:lib/tevent
                         third_party/popt:third_party/popt
-                        third_party/cmocka:third_party/cmocka
                         buildtools:buildtools third_party/waf:third_party/waf''')
 
 samba_dist.DIST_FILES('''lib/util/binsearch.h:lib/util/binsearch.h
@@ -46,17 +45,13 @@
 
     if conf.CHECK_FOR_THIRD_PARTY():
         conf.RECURSE('third_party/popt')
-        conf.RECURSE('third_party/cmocka')
     else:
         if not conf.CHECK_POPT():
             raise Errors.WafError('popt development packages have not been found.\nIf third_party is installed, check that it is in the proper place.')
         else:
             conf.define('USING_SYSTEM_POPT', 1)
 
-        if not conf.CHECK_CMOCKA():
-            raise Errors.WafError('cmocka development package have not been found.\nIf third_party is installed, check that it is in the proper place.')
-        else:
-            conf.define('USING_SYSTEM_CMOCKA', 1)
+        conf.define('USING_SYSTEM_CMOCKA', 0)
 
     conf.RECURSE('lib/replace')
     conf.find_program('xsltproc', var='XSLTPROC')
@@ -199,7 +194,6 @@
 
     if bld.CHECK_FOR_THIRD_PARTY():
         bld.RECURSE('third_party/popt')
-        bld.RECURSE('third_party/cmocka')
 
     bld.RECURSE('lib/replace')
     bld.RECURSE('lib/tdb')
@@ -459,207 +453,6 @@
                           deps='ldb dl popt',
                           private_library=True)
 
-        bld.SAMBA_BINARY('ldb_tdb_mod_op_test',
-                         source='tests/ldb_mod_op_test.c',
-                         cflags='-DTEST_BE=\"tdb\"',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_tdb_guid_mod_op_test',
-                         source='tests/ldb_mod_op_test.c',
-                         cflags='-DTEST_BE=\"tdb\" -DGUID_IDX=1',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_tdb_kv_ops_test',
-                         source='tests/ldb_kv_ops_test.c',
-                         cflags='-DTEST_BE=\"tdb\"',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_tdb_test',
-                         source='tests/ldb_tdb_test.c',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_msg_test',
-                         source='tests/ldb_msg.c',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('test_ldb_qsort',
-                         source='tests/test_ldb_qsort.c',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('test_ldb_dn',
-                         source='tests/test_ldb_dn.c',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_match_test',
-                         source='tests/ldb_match_test.c',
-                         deps='cmocka ldb',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_key_value_test',
-                         source='tests/ldb_key_value_test.c',
-                         deps='cmocka ldb ldb_tdb_err_map',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_parse_test',
-                         source='tests/ldb_parse_test.c',
-                         deps='cmocka ldb ldb_tdb_err_map',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_filter_attrs_test',
-                         source='tests/ldb_filter_attrs_test.c',
-                         deps='cmocka ldb ldb_tdb_err_map',
-                         install=False)
-
-        bld.SAMBA_BINARY('ldb_key_value_sub_txn_tdb_test',
-                         bld.SUBDIR('ldb_key_value',
-                             '''ldb_kv_search.c
-                                ldb_kv_index.c
-                                ldb_kv_cache.c''') +
-                         'tests/ldb_key_value_sub_txn_test.c',
-                         cflags='-DTEST_BE=\"tdb\"',
-                         deps='cmocka ldb ldb_tdb_err_map',
-                         install=False)
-
-        # If both libldap and liblber are available, test ldb_ldap
-        # code for a regression of bz#14413 -- even if we don't build
-        # it ourselves and simply using the system version
-        if bld.env.LIB_LDAP and bld.env.LIB_LBER:
-            bld.SAMBA_BINARY('lldb_ldap_test',
-                             source='tests/lldb_ldap.c',
-                             deps='cmocka talloc lber ldap ldb',
-                             install=False)
-
-        if bld.CONFIG_SET('HAVE_LMDB'):
-            bld.SAMBA_BINARY('ldb_mdb_mod_op_test',
-                             source='tests/ldb_mod_op_test.c',
-                             cflags='-DTEST_BE=\"mdb\" -DGUID_IDX=1 '
-                                  + '-DTEST_LMDB=1',
-                             deps='cmocka ldb lmdb',
-                             install=False)
-
-            bld.SAMBA_BINARY('ldb_lmdb_test',
-                             source='tests/ldb_lmdb_test.c',
-                             deps='cmocka ldb',
-                             install=False)
-
-            bld.SAMBA_BINARY('ldb_lmdb_size_test',
-                             source='tests/ldb_lmdb_size_test.c',
-                             deps='cmocka ldb',
-                             install=False)
-
-            bld.SAMBA_BINARY('ldb_mdb_kv_ops_test',
-                             source='tests/ldb_kv_ops_test.c',
-                             cflags='-DTEST_BE=\"mdb\" -DTEST_LMDB=1',
-                             deps='cmocka ldb',
-                             install=False)
-
-            bld.SAMBA_BINARY('ldb_lmdb_free_list_test',
-                             source='tests/ldb_lmdb_free_list_test.c',
-                             cflags='-DTEST_BE=\"mdb\" -DTEST_LMDB=1',
-                             deps='cmocka ldb',
-                             install=False)
-            #
-            # We rely on the versions of the ldb_key_value functions included
-            # in ldb_key_value_sub_txn_test.c taking priority over the versions
-            # in the ldb_key_value shared library.
-            # If this turns out to not be the case, the dependencies will
-            # need to be unrolled, and all the source files included and the
-            # ldb_tdb module initialization code will need to be called
-            # manually.
-            bld.SAMBA_BINARY('ldb_key_value_sub_txn_mdb_test',
-                             bld.SUBDIR('ldb_key_value',
-                                 '''ldb_kv_search.c
-                                    ldb_kv_index.c
-                                    ldb_kv_cache.c''') +
-                             'tests/ldb_key_value_sub_txn_test.c',
-                             cflags='-DTEST_BE=\"mdb\"',
-                             deps='cmocka ldb ldb_tdb_err_map',
-                             install=False)
-        else:
-            bld.SAMBA_BINARY('ldb_no_lmdb_test',
-                             source='tests/ldb_no_lmdb_test.c',
-                             deps='cmocka ldb',
-                             install=False)
-
-def test(ctx):
-    '''run ldb testsuite'''
-    env = samba_utils.LOAD_ENVIRONMENT()
-    ctx.env = env
-
-    test_prefix = "%s/st" % (Context.g_module.out)
-    shutil.rmtree(test_prefix, ignore_errors=True)
-    os.makedirs(test_prefix)
-    os.environ['TEST_DATA_PREFIX'] = test_prefix
-    os.environ['LDB_MODULES_PATH'] = Context.g_module.out + "/modules/ldb"
-    if env.HAVE_LMDB:
-        os.environ['HAVE_LMDB'] = '1'
-    else:
-        os.environ['HAVE_LMDB'] = '0'
-    samba_utils.ADD_LD_LIBRARY_PATH('bin/shared')
-    samba_utils.ADD_LD_LIBRARY_PATH('bin/shared/private')
-
-    cmd = 'tests/test-tdb.sh %s' % Context.g_module.out
-    ret = samba_utils.RUN_COMMAND(cmd)
-    print("testsuite returned %d" % ret)
-
-    tmp_dir = os.path.join(test_prefix, 'tmp')
-    if not os.path.exists(tmp_dir):
-        os.mkdir(tmp_dir)
-    pyret = samba_utils.RUN_PYTHON_TESTS(
-        ['tests/python/api.py',
-         'tests/python/index.py',
-         'tests/python/repack.py'],
-        extra_env={'SELFTEST_PREFIX': test_prefix})
-    print("Python testsuite returned %d" % pyret)
-
-    cmocka_ret = 0
-    test_exes = ['test_ldb_qsort',
-                 'test_ldb_dn',
-                 'ldb_msg_test',
-                 'ldb_tdb_mod_op_test',
-                 'ldb_tdb_guid_mod_op_test',
-                 'ldb_msg_test',
-                 'ldb_tdb_kv_ops_test',
-                 'ldb_tdb_test',
-                 'ldb_match_test',
-                 'ldb_key_value_test',
-                 # we currently don't run ldb_key_value_sub_txn_tdb_test as it
-                 # tests the nested/sub transaction handling
-                 # on operations which the TDB backend does not currently
-                 # support
-                 # 'ldb_key_value_sub_txn_tdb_test'
-                 'ldb_parse_test']
-
-    # if LIB_LDAP and LIB_LBER defined, then we can test ldb_ldap backend
-    # behavior regression for bz#14413
-    if env.LIB_LDAP and env.LIB_LBER:
-        test_exes += ["lldb_ldap_test"]
-
-    if env.HAVE_LMDB:
-        test_exes += ['ldb_mdb_mod_op_test',
-                      'ldb_lmdb_test',
-                      # we don't want to run ldb_lmdb_size_test (which proves
-                      # we can fit > 4G of data into the DB), it would fill up
-                      # the disk on many of our test instances
-                      'ldb_mdb_kv_ops_test',
-                      'ldb_key_value_sub_txn_mdb_test',
-                      'ldb_lmdb_free_list_test']
-    else:
-        test_exes += ['ldb_no_lmdb_test']
-
-    for test_exe in test_exes:
-            cmd = os.path.join(Context.g_module.out, test_exe)
-            cmocka_ret = cmocka_ret or samba_utils.RUN_COMMAND(cmd)
-
-    sys.exit(ret or pyret or cmocka_ret)
-
 def dist():
     '''makes a tarball for distribution'''
     samba_dist.dist()
--- a/buildtools/wafsamba/samba_third_party.py	2022-08-31 11:32:02.781481516 +0200
+++ b/buildtools/wafsamba/samba_third_party.py	2022-08-31 11:31:44.573522543 +0200
@@ -18,7 +18,7 @@
 
 @conf
 def CHECK_CMOCKA(conf):
-    return conf.CHECK_BUNDLED_SYSTEM_PKG('cmocka', minversion='1.1.3')
+    return False
 
 Build.BuildContext.CHECK_CMOCKA = CHECK_CMOCKA
 
