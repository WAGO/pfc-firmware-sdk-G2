# lighttpd webserver configuration file.
# Imports the basic mode of operation of web accesses (http only, https only, or http plus https)
# from include file mode.conf. mode.conf is a symbolic link to one specific mode.
#
# Include file redirect_default.conf determines the target of the empty url (root context) /.
# Choices are WBM (Web based configuration management) or WEBVISU (target application visualisation).
# $Id$

# HTTP Port variables
var.http_port_default       =   80
var.https_port_default      =  443

# Calculation for easier handling in dependent configs
var.default_sockets         = ":" + http_port_default   + "$|:" + https_port_default + "$|\[::\]:" + http_port_default   + "$|\[::\]:" + https_port_default + "$"
var.default_socket_http     = ":" + http_port_default   + "$|\[::\]:" + http_port_default  + "$"
var.default_socket_https    = ":" + https_port_default  + "$|\[::\]:" + https_port_default + "$"

# Localhost IPs
var.localhost_ips = "127\.0\.0\.\d{1,3}|::1"

# Common configuration values.
server.feature-flags      += (
    # HTTP/2 support: Currently disabled because CDS3 WebVisu does not work via HTTPS when enabled
    "server.h2proto" => "disable",

    # Workaround for new default behaviour in lighttpd
    # version 1.4.60 and still observable in 1.4.64
    # which causes the lighttpd to restart when a clock
    # jump above configured timespan in seconds happens.
    # The amount of seconds is configured to '0' to actually
    # disable the restart. If the restart happens, lighttpd
    # fails to start.
    "server.clock-jump-restart" => 0,

    # Since lighttpd 1.4.64 the default timeout for pending 
    # requests on a graceful shutdown (as triggered by 
    # '/etc/init.d/lighttpd reload') is set to 8 seconds instead
    # of 0 (=disabled/infinite) as it was before. 60s seams to be
    # a good deal between not accepting new requests and finishing
    # long-running pending ones.
    "server.graceful-shutdown-timeout" => 60
)

server.document-root       = "/var/www"
server.username            = "www"
server.groupname           = "www"
server.tag                 = "lighttpd"
server.errorlog            = "/var/log/lighttpd/error.log"
accesslog.filename         = "/var/log/lighttpd/access.log"
server.max-request-size    = 4096
server.stream-request-body = 2

$SERVER["socket"] =~ default_sockets {
    index-file.names       = ( "index.html", "index.php" )
}

server.modules             = (
    "mod_access",
    "mod_accesslog",
    "mod_auth",
    "mod_cgi",
    "mod_fastcgi",
    "mod_rewrite",
    "mod_redirect",
    "mod_proxy",
    "mod_deflate",
    "mod_openssl",
    "mod_setenv",
    "mod_authn_file"
)

# "do not handle as static file if path-info is present after file name
# Default value:disable (file is served by mod_staticfile)"
# (https://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModStaticFile)
static-file.disable-pathinfo = "enable"

url.redirect-code = 307

var.response_header_policy_base = (
    # Base CSP, allowing only content served by this webserver.
    "Content-Security-Policy" => "default-src 'self'",

    # Tell older browsers that this page can only be displayed if all ancestor
    # frames are same origin to the page itself.
    "X-Frame-Options" => "SAMEORIGIN"
)
var.response_header_policy_common = (
    # Enable deprecated XSS filtering for older browsers,
    # the block option will prevent rendering of the page if an attack is detected.
    "X-XSS-Protection" => "1; mode=block",

    # Tell a client/browser to not include referrer header when
    # navigating to another web page.
    "Referrer-Policy" => "no-referrer",

    # Tell client/browser not to guess content types but only accept content that
    # matches the content type provided by the content type header of a response.
    # This has only an effect on requests caused by <script> and <style> elements.
    "X-Content-Type-Options" => "nosniff"
)

# Response header policy for non-specific applications
$HTTP["url"] =~ "^/" {
    setenv.set-response-header  = var.response_header_policy_base
    setenv.set-response-header += var.response_header_policy_common
}

# Include configs for installed applications and backends
include_shell "cat apps.confd/*.conf 2>/dev/null ||:"


# Include global configs
include "redirect_default.conf"
include "mode.conf"
include "mime_types.conf"

# Deny access to hidden files
$HTTP["url"] =~ "/\." {
    url.access-deny = ("")
}
